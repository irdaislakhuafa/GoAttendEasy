// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/irdaislakhuafa/GoAttendEasy/src/schema/generated/predicate"
	"github.com/irdaislakhuafa/GoAttendEasy/src/schema/generated/userrole"
)

// UserRoleUpdate is the builder for updating UserRole entities.
type UserRoleUpdate struct {
	config
	hooks    []Hook
	mutation *UserRoleMutation
}

// Where appends a list predicates to the UserRoleUpdate builder.
func (uru *UserRoleUpdate) Where(ps ...predicate.UserRole) *UserRoleUpdate {
	uru.mutation.Where(ps...)
	return uru
}

// SetUserID sets the "user_id" field.
func (uru *UserRoleUpdate) SetUserID(s string) *UserRoleUpdate {
	uru.mutation.SetUserID(s)
	return uru
}

// SetRoleID sets the "role_id" field.
func (uru *UserRoleUpdate) SetRoleID(s string) *UserRoleUpdate {
	uru.mutation.SetRoleID(s)
	return uru
}

// SetCreatedAt sets the "created_at" field.
func (uru *UserRoleUpdate) SetCreatedAt(t time.Time) *UserRoleUpdate {
	uru.mutation.SetCreatedAt(t)
	return uru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uru *UserRoleUpdate) SetNillableCreatedAt(t *time.Time) *UserRoleUpdate {
	if t != nil {
		uru.SetCreatedAt(*t)
	}
	return uru
}

// SetCreatedBy sets the "created_by" field.
func (uru *UserRoleUpdate) SetCreatedBy(s string) *UserRoleUpdate {
	uru.mutation.SetCreatedBy(s)
	return uru
}

// SetUpdatedAt sets the "updated_at" field.
func (uru *UserRoleUpdate) SetUpdatedAt(t time.Time) *UserRoleUpdate {
	uru.mutation.SetUpdatedAt(t)
	return uru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uru *UserRoleUpdate) SetNillableUpdatedAt(t *time.Time) *UserRoleUpdate {
	if t != nil {
		uru.SetUpdatedAt(*t)
	}
	return uru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uru *UserRoleUpdate) ClearUpdatedAt() *UserRoleUpdate {
	uru.mutation.ClearUpdatedAt()
	return uru
}

// SetUpdatedBy sets the "updated_by" field.
func (uru *UserRoleUpdate) SetUpdatedBy(s string) *UserRoleUpdate {
	uru.mutation.SetUpdatedBy(s)
	return uru
}

// SetDeletedAt sets the "deleted_at" field.
func (uru *UserRoleUpdate) SetDeletedAt(t time.Time) *UserRoleUpdate {
	uru.mutation.SetDeletedAt(t)
	return uru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uru *UserRoleUpdate) SetNillableDeletedAt(t *time.Time) *UserRoleUpdate {
	if t != nil {
		uru.SetDeletedAt(*t)
	}
	return uru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uru *UserRoleUpdate) ClearDeletedAt() *UserRoleUpdate {
	uru.mutation.ClearDeletedAt()
	return uru
}

// SetDeletedBy sets the "deleted_by" field.
func (uru *UserRoleUpdate) SetDeletedBy(s string) *UserRoleUpdate {
	uru.mutation.SetDeletedBy(s)
	return uru
}

// SetIsDeleted sets the "is_deleted" field.
func (uru *UserRoleUpdate) SetIsDeleted(b bool) *UserRoleUpdate {
	uru.mutation.SetIsDeleted(b)
	return uru
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (uru *UserRoleUpdate) SetNillableIsDeleted(b *bool) *UserRoleUpdate {
	if b != nil {
		uru.SetIsDeleted(*b)
	}
	return uru
}

// Mutation returns the UserRoleMutation object of the builder.
func (uru *UserRoleUpdate) Mutation() *UserRoleMutation {
	return uru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uru *UserRoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uru.sqlSave, uru.mutation, uru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uru *UserRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := uru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uru *UserRoleUpdate) Exec(ctx context.Context) error {
	_, err := uru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uru *UserRoleUpdate) ExecX(ctx context.Context) {
	if err := uru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uru *UserRoleUpdate) check() error {
	if v, ok := uru.mutation.UserID(); ok {
		if err := userrole.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`generated: validator failed for field "UserRole.user_id": %w`, err)}
		}
	}
	if v, ok := uru.mutation.RoleID(); ok {
		if err := userrole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`generated: validator failed for field "UserRole.role_id": %w`, err)}
		}
	}
	if v, ok := uru.mutation.CreatedBy(); ok {
		if err := userrole.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`generated: validator failed for field "UserRole.created_by": %w`, err)}
		}
	}
	return nil
}

func (uru *UserRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userrole.Table, userrole.Columns, sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUUID))
	if ps := uru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uru.mutation.UserID(); ok {
		_spec.SetField(userrole.FieldUserID, field.TypeString, value)
	}
	if value, ok := uru.mutation.RoleID(); ok {
		_spec.SetField(userrole.FieldRoleID, field.TypeString, value)
	}
	if value, ok := uru.mutation.CreatedAt(); ok {
		_spec.SetField(userrole.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uru.mutation.CreatedBy(); ok {
		_spec.SetField(userrole.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := uru.mutation.UpdatedAt(); ok {
		_spec.SetField(userrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if uru.mutation.UpdatedAtCleared() {
		_spec.ClearField(userrole.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uru.mutation.UpdatedBy(); ok {
		_spec.SetField(userrole.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := uru.mutation.DeletedAt(); ok {
		_spec.SetField(userrole.FieldDeletedAt, field.TypeTime, value)
	}
	if uru.mutation.DeletedAtCleared() {
		_spec.ClearField(userrole.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uru.mutation.DeletedBy(); ok {
		_spec.SetField(userrole.FieldDeletedBy, field.TypeString, value)
	}
	if value, ok := uru.mutation.IsDeleted(); ok {
		_spec.SetField(userrole.FieldIsDeleted, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uru.mutation.done = true
	return n, nil
}

// UserRoleUpdateOne is the builder for updating a single UserRole entity.
type UserRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserRoleMutation
}

// SetUserID sets the "user_id" field.
func (uruo *UserRoleUpdateOne) SetUserID(s string) *UserRoleUpdateOne {
	uruo.mutation.SetUserID(s)
	return uruo
}

// SetRoleID sets the "role_id" field.
func (uruo *UserRoleUpdateOne) SetRoleID(s string) *UserRoleUpdateOne {
	uruo.mutation.SetRoleID(s)
	return uruo
}

// SetCreatedAt sets the "created_at" field.
func (uruo *UserRoleUpdateOne) SetCreatedAt(t time.Time) *UserRoleUpdateOne {
	uruo.mutation.SetCreatedAt(t)
	return uruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uruo *UserRoleUpdateOne) SetNillableCreatedAt(t *time.Time) *UserRoleUpdateOne {
	if t != nil {
		uruo.SetCreatedAt(*t)
	}
	return uruo
}

// SetCreatedBy sets the "created_by" field.
func (uruo *UserRoleUpdateOne) SetCreatedBy(s string) *UserRoleUpdateOne {
	uruo.mutation.SetCreatedBy(s)
	return uruo
}

// SetUpdatedAt sets the "updated_at" field.
func (uruo *UserRoleUpdateOne) SetUpdatedAt(t time.Time) *UserRoleUpdateOne {
	uruo.mutation.SetUpdatedAt(t)
	return uruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uruo *UserRoleUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserRoleUpdateOne {
	if t != nil {
		uruo.SetUpdatedAt(*t)
	}
	return uruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uruo *UserRoleUpdateOne) ClearUpdatedAt() *UserRoleUpdateOne {
	uruo.mutation.ClearUpdatedAt()
	return uruo
}

// SetUpdatedBy sets the "updated_by" field.
func (uruo *UserRoleUpdateOne) SetUpdatedBy(s string) *UserRoleUpdateOne {
	uruo.mutation.SetUpdatedBy(s)
	return uruo
}

// SetDeletedAt sets the "deleted_at" field.
func (uruo *UserRoleUpdateOne) SetDeletedAt(t time.Time) *UserRoleUpdateOne {
	uruo.mutation.SetDeletedAt(t)
	return uruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uruo *UserRoleUpdateOne) SetNillableDeletedAt(t *time.Time) *UserRoleUpdateOne {
	if t != nil {
		uruo.SetDeletedAt(*t)
	}
	return uruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uruo *UserRoleUpdateOne) ClearDeletedAt() *UserRoleUpdateOne {
	uruo.mutation.ClearDeletedAt()
	return uruo
}

// SetDeletedBy sets the "deleted_by" field.
func (uruo *UserRoleUpdateOne) SetDeletedBy(s string) *UserRoleUpdateOne {
	uruo.mutation.SetDeletedBy(s)
	return uruo
}

// SetIsDeleted sets the "is_deleted" field.
func (uruo *UserRoleUpdateOne) SetIsDeleted(b bool) *UserRoleUpdateOne {
	uruo.mutation.SetIsDeleted(b)
	return uruo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (uruo *UserRoleUpdateOne) SetNillableIsDeleted(b *bool) *UserRoleUpdateOne {
	if b != nil {
		uruo.SetIsDeleted(*b)
	}
	return uruo
}

// Mutation returns the UserRoleMutation object of the builder.
func (uruo *UserRoleUpdateOne) Mutation() *UserRoleMutation {
	return uruo.mutation
}

// Where appends a list predicates to the UserRoleUpdate builder.
func (uruo *UserRoleUpdateOne) Where(ps ...predicate.UserRole) *UserRoleUpdateOne {
	uruo.mutation.Where(ps...)
	return uruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uruo *UserRoleUpdateOne) Select(field string, fields ...string) *UserRoleUpdateOne {
	uruo.fields = append([]string{field}, fields...)
	return uruo
}

// Save executes the query and returns the updated UserRole entity.
func (uruo *UserRoleUpdateOne) Save(ctx context.Context) (*UserRole, error) {
	return withHooks(ctx, uruo.sqlSave, uruo.mutation, uruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uruo *UserRoleUpdateOne) SaveX(ctx context.Context) *UserRole {
	node, err := uruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uruo *UserRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := uruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uruo *UserRoleUpdateOne) ExecX(ctx context.Context) {
	if err := uruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uruo *UserRoleUpdateOne) check() error {
	if v, ok := uruo.mutation.UserID(); ok {
		if err := userrole.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`generated: validator failed for field "UserRole.user_id": %w`, err)}
		}
	}
	if v, ok := uruo.mutation.RoleID(); ok {
		if err := userrole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`generated: validator failed for field "UserRole.role_id": %w`, err)}
		}
	}
	if v, ok := uruo.mutation.CreatedBy(); ok {
		if err := userrole.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`generated: validator failed for field "UserRole.created_by": %w`, err)}
		}
	}
	return nil
}

func (uruo *UserRoleUpdateOne) sqlSave(ctx context.Context) (_node *UserRole, err error) {
	if err := uruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userrole.Table, userrole.Columns, sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUUID))
	id, ok := uruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "UserRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userrole.FieldID)
		for _, f := range fields {
			if !userrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != userrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uruo.mutation.UserID(); ok {
		_spec.SetField(userrole.FieldUserID, field.TypeString, value)
	}
	if value, ok := uruo.mutation.RoleID(); ok {
		_spec.SetField(userrole.FieldRoleID, field.TypeString, value)
	}
	if value, ok := uruo.mutation.CreatedAt(); ok {
		_spec.SetField(userrole.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uruo.mutation.CreatedBy(); ok {
		_spec.SetField(userrole.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := uruo.mutation.UpdatedAt(); ok {
		_spec.SetField(userrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if uruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(userrole.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uruo.mutation.UpdatedBy(); ok {
		_spec.SetField(userrole.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := uruo.mutation.DeletedAt(); ok {
		_spec.SetField(userrole.FieldDeletedAt, field.TypeTime, value)
	}
	if uruo.mutation.DeletedAtCleared() {
		_spec.ClearField(userrole.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uruo.mutation.DeletedBy(); ok {
		_spec.SetField(userrole.FieldDeletedBy, field.TypeString, value)
	}
	if value, ok := uruo.mutation.IsDeleted(); ok {
		_spec.SetField(userrole.FieldIsDeleted, field.TypeBool, value)
	}
	_node = &UserRole{config: uruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uruo.mutation.done = true
	return _node, nil
}
