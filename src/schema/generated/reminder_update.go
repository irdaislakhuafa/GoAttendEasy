// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/irdaislakhuafa/GoAttendEasy/src/schema/generated/predicate"
	"github.com/irdaislakhuafa/GoAttendEasy/src/schema/generated/reminder"
)

// ReminderUpdate is the builder for updating Reminder entities.
type ReminderUpdate struct {
	config
	hooks    []Hook
	mutation *ReminderMutation
}

// Where appends a list predicates to the ReminderUpdate builder.
func (ru *ReminderUpdate) Where(ps ...predicate.Reminder) *ReminderUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetIn sets the "in" field.
func (ru *ReminderUpdate) SetIn(t time.Time) *ReminderUpdate {
	ru.mutation.SetIn(t)
	return ru
}

// SetOut sets the "out" field.
func (ru *ReminderUpdate) SetOut(t time.Time) *ReminderUpdate {
	ru.mutation.SetOut(t)
	return ru
}

// SetDay sets the "day" field.
func (ru *ReminderUpdate) SetDay(i int) *ReminderUpdate {
	ru.mutation.ResetDay()
	ru.mutation.SetDay(i)
	return ru
}

// AddDay adds i to the "day" field.
func (ru *ReminderUpdate) AddDay(i int) *ReminderUpdate {
	ru.mutation.AddDay(i)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *ReminderUpdate) SetCreatedAt(t time.Time) *ReminderUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *ReminderUpdate) SetNillableCreatedAt(t *time.Time) *ReminderUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// ClearCreatedAt clears the value of the "created_at" field.
func (ru *ReminderUpdate) ClearCreatedAt() *ReminderUpdate {
	ru.mutation.ClearCreatedAt()
	return ru
}

// SetCreatedBy sets the "created_by" field.
func (ru *ReminderUpdate) SetCreatedBy(s string) *ReminderUpdate {
	ru.mutation.SetCreatedBy(s)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReminderUpdate) SetUpdatedAt(t time.Time) *ReminderUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *ReminderUpdate) SetNillableUpdatedAt(t *time.Time) *ReminderUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ru *ReminderUpdate) ClearUpdatedAt() *ReminderUpdate {
	ru.mutation.ClearUpdatedAt()
	return ru
}

// SetUpdatedBy sets the "updated_by" field.
func (ru *ReminderUpdate) SetUpdatedBy(s string) *ReminderUpdate {
	ru.mutation.SetUpdatedBy(s)
	return ru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ru *ReminderUpdate) SetNillableUpdatedBy(s *string) *ReminderUpdate {
	if s != nil {
		ru.SetUpdatedBy(*s)
	}
	return ru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ru *ReminderUpdate) ClearUpdatedBy() *ReminderUpdate {
	ru.mutation.ClearUpdatedBy()
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *ReminderUpdate) SetDeletedAt(t time.Time) *ReminderUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *ReminderUpdate) SetNillableDeletedAt(t *time.Time) *ReminderUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *ReminderUpdate) ClearDeletedAt() *ReminderUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetDeletedBy sets the "deleted_by" field.
func (ru *ReminderUpdate) SetDeletedBy(s string) *ReminderUpdate {
	ru.mutation.SetDeletedBy(s)
	return ru
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ru *ReminderUpdate) SetNillableDeletedBy(s *string) *ReminderUpdate {
	if s != nil {
		ru.SetDeletedBy(*s)
	}
	return ru
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ru *ReminderUpdate) ClearDeletedBy() *ReminderUpdate {
	ru.mutation.ClearDeletedBy()
	return ru
}

// SetIsDeleted sets the "is_deleted" field.
func (ru *ReminderUpdate) SetIsDeleted(b bool) *ReminderUpdate {
	ru.mutation.SetIsDeleted(b)
	return ru
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ru *ReminderUpdate) SetNillableIsDeleted(b *bool) *ReminderUpdate {
	if b != nil {
		ru.SetIsDeleted(*b)
	}
	return ru
}

// Mutation returns the ReminderMutation object of the builder.
func (ru *ReminderUpdate) Mutation() *ReminderMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReminderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReminderUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReminderUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReminderUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReminderUpdate) check() error {
	if v, ok := ru.mutation.Day(); ok {
		if err := reminder.DayValidator(v); err != nil {
			return &ValidationError{Name: "day", err: fmt.Errorf(`generated: validator failed for field "Reminder.day": %w`, err)}
		}
	}
	if v, ok := ru.mutation.CreatedBy(); ok {
		if err := reminder.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`generated: validator failed for field "Reminder.created_by": %w`, err)}
		}
	}
	return nil
}

func (ru *ReminderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reminder.Table, reminder.Columns, sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.In(); ok {
		_spec.SetField(reminder.FieldIn, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Out(); ok {
		_spec.SetField(reminder.FieldOut, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Day(); ok {
		_spec.SetField(reminder.FieldDay, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedDay(); ok {
		_spec.AddField(reminder.FieldDay, field.TypeInt, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(reminder.FieldCreatedAt, field.TypeTime, value)
	}
	if ru.mutation.CreatedAtCleared() {
		_spec.ClearField(reminder.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.CreatedBy(); ok {
		_spec.SetField(reminder.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(reminder.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.UpdatedAtCleared() {
		_spec.ClearField(reminder.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.UpdatedBy(); ok {
		_spec.SetField(reminder.FieldUpdatedBy, field.TypeString, value)
	}
	if ru.mutation.UpdatedByCleared() {
		_spec.ClearField(reminder.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(reminder.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(reminder.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.DeletedBy(); ok {
		_spec.SetField(reminder.FieldDeletedBy, field.TypeString, value)
	}
	if ru.mutation.DeletedByCleared() {
		_spec.ClearField(reminder.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ru.mutation.IsDeleted(); ok {
		_spec.SetField(reminder.FieldIsDeleted, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reminder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReminderUpdateOne is the builder for updating a single Reminder entity.
type ReminderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReminderMutation
}

// SetIn sets the "in" field.
func (ruo *ReminderUpdateOne) SetIn(t time.Time) *ReminderUpdateOne {
	ruo.mutation.SetIn(t)
	return ruo
}

// SetOut sets the "out" field.
func (ruo *ReminderUpdateOne) SetOut(t time.Time) *ReminderUpdateOne {
	ruo.mutation.SetOut(t)
	return ruo
}

// SetDay sets the "day" field.
func (ruo *ReminderUpdateOne) SetDay(i int) *ReminderUpdateOne {
	ruo.mutation.ResetDay()
	ruo.mutation.SetDay(i)
	return ruo
}

// AddDay adds i to the "day" field.
func (ruo *ReminderUpdateOne) AddDay(i int) *ReminderUpdateOne {
	ruo.mutation.AddDay(i)
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *ReminderUpdateOne) SetCreatedAt(t time.Time) *ReminderUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *ReminderUpdateOne) SetNillableCreatedAt(t *time.Time) *ReminderUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (ruo *ReminderUpdateOne) ClearCreatedAt() *ReminderUpdateOne {
	ruo.mutation.ClearCreatedAt()
	return ruo
}

// SetCreatedBy sets the "created_by" field.
func (ruo *ReminderUpdateOne) SetCreatedBy(s string) *ReminderUpdateOne {
	ruo.mutation.SetCreatedBy(s)
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReminderUpdateOne) SetUpdatedAt(t time.Time) *ReminderUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *ReminderUpdateOne) SetNillableUpdatedAt(t *time.Time) *ReminderUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ruo *ReminderUpdateOne) ClearUpdatedAt() *ReminderUpdateOne {
	ruo.mutation.ClearUpdatedAt()
	return ruo
}

// SetUpdatedBy sets the "updated_by" field.
func (ruo *ReminderUpdateOne) SetUpdatedBy(s string) *ReminderUpdateOne {
	ruo.mutation.SetUpdatedBy(s)
	return ruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruo *ReminderUpdateOne) SetNillableUpdatedBy(s *string) *ReminderUpdateOne {
	if s != nil {
		ruo.SetUpdatedBy(*s)
	}
	return ruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ruo *ReminderUpdateOne) ClearUpdatedBy() *ReminderUpdateOne {
	ruo.mutation.ClearUpdatedBy()
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *ReminderUpdateOne) SetDeletedAt(t time.Time) *ReminderUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *ReminderUpdateOne) SetNillableDeletedAt(t *time.Time) *ReminderUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *ReminderUpdateOne) ClearDeletedAt() *ReminderUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetDeletedBy sets the "deleted_by" field.
func (ruo *ReminderUpdateOne) SetDeletedBy(s string) *ReminderUpdateOne {
	ruo.mutation.SetDeletedBy(s)
	return ruo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ruo *ReminderUpdateOne) SetNillableDeletedBy(s *string) *ReminderUpdateOne {
	if s != nil {
		ruo.SetDeletedBy(*s)
	}
	return ruo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ruo *ReminderUpdateOne) ClearDeletedBy() *ReminderUpdateOne {
	ruo.mutation.ClearDeletedBy()
	return ruo
}

// SetIsDeleted sets the "is_deleted" field.
func (ruo *ReminderUpdateOne) SetIsDeleted(b bool) *ReminderUpdateOne {
	ruo.mutation.SetIsDeleted(b)
	return ruo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ruo *ReminderUpdateOne) SetNillableIsDeleted(b *bool) *ReminderUpdateOne {
	if b != nil {
		ruo.SetIsDeleted(*b)
	}
	return ruo
}

// Mutation returns the ReminderMutation object of the builder.
func (ruo *ReminderUpdateOne) Mutation() *ReminderMutation {
	return ruo.mutation
}

// Where appends a list predicates to the ReminderUpdate builder.
func (ruo *ReminderUpdateOne) Where(ps ...predicate.Reminder) *ReminderUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReminderUpdateOne) Select(field string, fields ...string) *ReminderUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reminder entity.
func (ruo *ReminderUpdateOne) Save(ctx context.Context) (*Reminder, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReminderUpdateOne) SaveX(ctx context.Context) *Reminder {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReminderUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReminderUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReminderUpdateOne) check() error {
	if v, ok := ruo.mutation.Day(); ok {
		if err := reminder.DayValidator(v); err != nil {
			return &ValidationError{Name: "day", err: fmt.Errorf(`generated: validator failed for field "Reminder.day": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.CreatedBy(); ok {
		if err := reminder.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`generated: validator failed for field "Reminder.created_by": %w`, err)}
		}
	}
	return nil
}

func (ruo *ReminderUpdateOne) sqlSave(ctx context.Context) (_node *Reminder, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reminder.Table, reminder.Columns, sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Reminder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reminder.FieldID)
		for _, f := range fields {
			if !reminder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != reminder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.In(); ok {
		_spec.SetField(reminder.FieldIn, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Out(); ok {
		_spec.SetField(reminder.FieldOut, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Day(); ok {
		_spec.SetField(reminder.FieldDay, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedDay(); ok {
		_spec.AddField(reminder.FieldDay, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(reminder.FieldCreatedAt, field.TypeTime, value)
	}
	if ruo.mutation.CreatedAtCleared() {
		_spec.ClearField(reminder.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.CreatedBy(); ok {
		_spec.SetField(reminder.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(reminder.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(reminder.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.UpdatedBy(); ok {
		_spec.SetField(reminder.FieldUpdatedBy, field.TypeString, value)
	}
	if ruo.mutation.UpdatedByCleared() {
		_spec.ClearField(reminder.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(reminder.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(reminder.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.DeletedBy(); ok {
		_spec.SetField(reminder.FieldDeletedBy, field.TypeString, value)
	}
	if ruo.mutation.DeletedByCleared() {
		_spec.ClearField(reminder.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.IsDeleted(); ok {
		_spec.SetField(reminder.FieldIsDeleted, field.TypeBool, value)
	}
	_node = &Reminder{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reminder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
