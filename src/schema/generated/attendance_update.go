// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/irdaislakhuafa/GoAttendEasy/src/schema/generated/attendance"
	"github.com/irdaislakhuafa/GoAttendEasy/src/schema/generated/predicate"
)

// AttendanceUpdate is the builder for updating Attendance entities.
type AttendanceUpdate struct {
	config
	hooks    []Hook
	mutation *AttendanceMutation
}

// Where appends a list predicates to the AttendanceUpdate builder.
func (au *AttendanceUpdate) Where(ps ...predicate.Attendance) *AttendanceUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUserID sets the "user_id" field.
func (au *AttendanceUpdate) SetUserID(s string) *AttendanceUpdate {
	au.mutation.SetUserID(s)
	return au
}

// SetIn sets the "in" field.
func (au *AttendanceUpdate) SetIn(t time.Time) *AttendanceUpdate {
	au.mutation.SetIn(t)
	return au
}

// SetOut sets the "out" field.
func (au *AttendanceUpdate) SetOut(t time.Time) *AttendanceUpdate {
	au.mutation.SetOut(t)
	return au
}

// SetIsPresent sets the "is_present" field.
func (au *AttendanceUpdate) SetIsPresent(b bool) *AttendanceUpdate {
	au.mutation.SetIsPresent(b)
	return au
}

// SetNillableIsPresent sets the "is_present" field if the given value is not nil.
func (au *AttendanceUpdate) SetNillableIsPresent(b *bool) *AttendanceUpdate {
	if b != nil {
		au.SetIsPresent(*b)
	}
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AttendanceUpdate) SetCreatedAt(t time.Time) *AttendanceUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AttendanceUpdate) SetNillableCreatedAt(t *time.Time) *AttendanceUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetCreatedBy sets the "created_by" field.
func (au *AttendanceUpdate) SetCreatedBy(s string) *AttendanceUpdate {
	au.mutation.SetCreatedBy(s)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AttendanceUpdate) SetUpdatedAt(t time.Time) *AttendanceUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *AttendanceUpdate) SetNillableUpdatedAt(t *time.Time) *AttendanceUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AttendanceUpdate) ClearUpdatedAt() *AttendanceUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetUpdatedBy sets the "updated_by" field.
func (au *AttendanceUpdate) SetUpdatedBy(s string) *AttendanceUpdate {
	au.mutation.SetUpdatedBy(s)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AttendanceUpdate) SetDeletedAt(t time.Time) *AttendanceUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AttendanceUpdate) SetNillableDeletedAt(t *time.Time) *AttendanceUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AttendanceUpdate) ClearDeletedAt() *AttendanceUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetDeletedBy sets the "deleted_by" field.
func (au *AttendanceUpdate) SetDeletedBy(s string) *AttendanceUpdate {
	au.mutation.SetDeletedBy(s)
	return au
}

// SetIsDeleted sets the "is_deleted" field.
func (au *AttendanceUpdate) SetIsDeleted(b bool) *AttendanceUpdate {
	au.mutation.SetIsDeleted(b)
	return au
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (au *AttendanceUpdate) SetNillableIsDeleted(b *bool) *AttendanceUpdate {
	if b != nil {
		au.SetIsDeleted(*b)
	}
	return au
}

// Mutation returns the AttendanceMutation object of the builder.
func (au *AttendanceUpdate) Mutation() *AttendanceMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttendanceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttendanceUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttendanceUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttendanceUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AttendanceUpdate) check() error {
	if v, ok := au.mutation.UserID(); ok {
		if err := attendance.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`generated: validator failed for field "Attendance.user_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.CreatedBy(); ok {
		if err := attendance.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`generated: validator failed for field "Attendance.created_by": %w`, err)}
		}
	}
	return nil
}

func (au *AttendanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attendance.Table, attendance.Columns, sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UserID(); ok {
		_spec.SetField(attendance.FieldUserID, field.TypeString, value)
	}
	if value, ok := au.mutation.In(); ok {
		_spec.SetField(attendance.FieldIn, field.TypeTime, value)
	}
	if value, ok := au.mutation.Out(); ok {
		_spec.SetField(attendance.FieldOut, field.TypeTime, value)
	}
	if value, ok := au.mutation.IsPresent(); ok {
		_spec.SetField(attendance.FieldIsPresent, field.TypeBool, value)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(attendance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.CreatedBy(); ok {
		_spec.SetField(attendance.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(attendance.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(attendance.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedBy(); ok {
		_spec.SetField(attendance.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(attendance.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(attendance.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.DeletedBy(); ok {
		_spec.SetField(attendance.FieldDeletedBy, field.TypeString, value)
	}
	if value, ok := au.mutation.IsDeleted(); ok {
		_spec.SetField(attendance.FieldIsDeleted, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AttendanceUpdateOne is the builder for updating a single Attendance entity.
type AttendanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttendanceMutation
}

// SetUserID sets the "user_id" field.
func (auo *AttendanceUpdateOne) SetUserID(s string) *AttendanceUpdateOne {
	auo.mutation.SetUserID(s)
	return auo
}

// SetIn sets the "in" field.
func (auo *AttendanceUpdateOne) SetIn(t time.Time) *AttendanceUpdateOne {
	auo.mutation.SetIn(t)
	return auo
}

// SetOut sets the "out" field.
func (auo *AttendanceUpdateOne) SetOut(t time.Time) *AttendanceUpdateOne {
	auo.mutation.SetOut(t)
	return auo
}

// SetIsPresent sets the "is_present" field.
func (auo *AttendanceUpdateOne) SetIsPresent(b bool) *AttendanceUpdateOne {
	auo.mutation.SetIsPresent(b)
	return auo
}

// SetNillableIsPresent sets the "is_present" field if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableIsPresent(b *bool) *AttendanceUpdateOne {
	if b != nil {
		auo.SetIsPresent(*b)
	}
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AttendanceUpdateOne) SetCreatedAt(t time.Time) *AttendanceUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableCreatedAt(t *time.Time) *AttendanceUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetCreatedBy sets the "created_by" field.
func (auo *AttendanceUpdateOne) SetCreatedBy(s string) *AttendanceUpdateOne {
	auo.mutation.SetCreatedBy(s)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AttendanceUpdateOne) SetUpdatedAt(t time.Time) *AttendanceUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableUpdatedAt(t *time.Time) *AttendanceUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AttendanceUpdateOne) ClearUpdatedAt() *AttendanceUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetUpdatedBy sets the "updated_by" field.
func (auo *AttendanceUpdateOne) SetUpdatedBy(s string) *AttendanceUpdateOne {
	auo.mutation.SetUpdatedBy(s)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AttendanceUpdateOne) SetDeletedAt(t time.Time) *AttendanceUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableDeletedAt(t *time.Time) *AttendanceUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AttendanceUpdateOne) ClearDeletedAt() *AttendanceUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetDeletedBy sets the "deleted_by" field.
func (auo *AttendanceUpdateOne) SetDeletedBy(s string) *AttendanceUpdateOne {
	auo.mutation.SetDeletedBy(s)
	return auo
}

// SetIsDeleted sets the "is_deleted" field.
func (auo *AttendanceUpdateOne) SetIsDeleted(b bool) *AttendanceUpdateOne {
	auo.mutation.SetIsDeleted(b)
	return auo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableIsDeleted(b *bool) *AttendanceUpdateOne {
	if b != nil {
		auo.SetIsDeleted(*b)
	}
	return auo
}

// Mutation returns the AttendanceMutation object of the builder.
func (auo *AttendanceUpdateOne) Mutation() *AttendanceMutation {
	return auo.mutation
}

// Where appends a list predicates to the AttendanceUpdate builder.
func (auo *AttendanceUpdateOne) Where(ps ...predicate.Attendance) *AttendanceUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttendanceUpdateOne) Select(field string, fields ...string) *AttendanceUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attendance entity.
func (auo *AttendanceUpdateOne) Save(ctx context.Context) (*Attendance, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttendanceUpdateOne) SaveX(ctx context.Context) *Attendance {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttendanceUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttendanceUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AttendanceUpdateOne) check() error {
	if v, ok := auo.mutation.UserID(); ok {
		if err := attendance.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`generated: validator failed for field "Attendance.user_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.CreatedBy(); ok {
		if err := attendance.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`generated: validator failed for field "Attendance.created_by": %w`, err)}
		}
	}
	return nil
}

func (auo *AttendanceUpdateOne) sqlSave(ctx context.Context) (_node *Attendance, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attendance.Table, attendance.Columns, sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Attendance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attendance.FieldID)
		for _, f := range fields {
			if !attendance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != attendance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UserID(); ok {
		_spec.SetField(attendance.FieldUserID, field.TypeString, value)
	}
	if value, ok := auo.mutation.In(); ok {
		_spec.SetField(attendance.FieldIn, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Out(); ok {
		_spec.SetField(attendance.FieldOut, field.TypeTime, value)
	}
	if value, ok := auo.mutation.IsPresent(); ok {
		_spec.SetField(attendance.FieldIsPresent, field.TypeBool, value)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(attendance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.CreatedBy(); ok {
		_spec.SetField(attendance.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(attendance.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(attendance.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedBy(); ok {
		_spec.SetField(attendance.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(attendance.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(attendance.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.DeletedBy(); ok {
		_spec.SetField(attendance.FieldDeletedBy, field.TypeString, value)
	}
	if value, ok := auo.mutation.IsDeleted(); ok {
		_spec.SetField(attendance.FieldIsDeleted, field.TypeBool, value)
	}
	_node = &Attendance{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
