// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/irdaislakhuafa/GoAttendEasy/src/schema/generated/division"
)

// DivisionCreate is the builder for creating a Division entity.
type DivisionCreate struct {
	config
	mutation *DivisionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (dc *DivisionCreate) SetName(s string) *DivisionCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetDescription sets the "description" field.
func (dc *DivisionCreate) SetDescription(s string) *DivisionCreate {
	dc.mutation.SetDescription(s)
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DivisionCreate) SetCreatedAt(t time.Time) *DivisionCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DivisionCreate) SetNillableCreatedAt(t *time.Time) *DivisionCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetCreatedBy sets the "created_by" field.
func (dc *DivisionCreate) SetCreatedBy(s string) *DivisionCreate {
	dc.mutation.SetCreatedBy(s)
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DivisionCreate) SetUpdatedAt(t time.Time) *DivisionCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DivisionCreate) SetNillableUpdatedAt(t *time.Time) *DivisionCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetUpdatedBy sets the "updated_by" field.
func (dc *DivisionCreate) SetUpdatedBy(s string) *DivisionCreate {
	dc.mutation.SetUpdatedBy(s)
	return dc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dc *DivisionCreate) SetNillableUpdatedBy(s *string) *DivisionCreate {
	if s != nil {
		dc.SetUpdatedBy(*s)
	}
	return dc
}

// SetDeletedAt sets the "deleted_at" field.
func (dc *DivisionCreate) SetDeletedAt(t time.Time) *DivisionCreate {
	dc.mutation.SetDeletedAt(t)
	return dc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dc *DivisionCreate) SetNillableDeletedAt(t *time.Time) *DivisionCreate {
	if t != nil {
		dc.SetDeletedAt(*t)
	}
	return dc
}

// SetDeletedBy sets the "deleted_by" field.
func (dc *DivisionCreate) SetDeletedBy(s string) *DivisionCreate {
	dc.mutation.SetDeletedBy(s)
	return dc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (dc *DivisionCreate) SetNillableDeletedBy(s *string) *DivisionCreate {
	if s != nil {
		dc.SetDeletedBy(*s)
	}
	return dc
}

// SetIsDeleted sets the "is_deleted" field.
func (dc *DivisionCreate) SetIsDeleted(b bool) *DivisionCreate {
	dc.mutation.SetIsDeleted(b)
	return dc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (dc *DivisionCreate) SetNillableIsDeleted(b *bool) *DivisionCreate {
	if b != nil {
		dc.SetIsDeleted(*b)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DivisionCreate) SetID(s string) *DivisionCreate {
	dc.mutation.SetID(s)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DivisionCreate) SetNillableID(s *string) *DivisionCreate {
	if s != nil {
		dc.SetID(*s)
	}
	return dc
}

// Mutation returns the DivisionMutation object of the builder.
func (dc *DivisionCreate) Mutation() *DivisionMutation {
	return dc.mutation
}

// Save creates the Division in the database.
func (dc *DivisionCreate) Save(ctx context.Context) (*Division, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DivisionCreate) SaveX(ctx context.Context) *Division {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DivisionCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DivisionCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DivisionCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := division.DefaultCreatedAt
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.IsDeleted(); !ok {
		v := division.DefaultIsDeleted
		dc.mutation.SetIsDeleted(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := division.DefaultID
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DivisionCreate) check() error {
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Division.name"`)}
	}
	if v, ok := dc.mutation.Name(); ok {
		if err := division.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Division.name": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`generated: missing required field "Division.description"`)}
	}
	if v, ok := dc.mutation.Description(); ok {
		if err := division.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Division.description": %w`, err)}
		}
	}
	if _, ok := dc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`generated: missing required field "Division.created_by"`)}
	}
	if v, ok := dc.mutation.CreatedBy(); ok {
		if err := division.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`generated: validator failed for field "Division.created_by": %w`, err)}
		}
	}
	if _, ok := dc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`generated: missing required field "Division.is_deleted"`)}
	}
	return nil
}

func (dc *DivisionCreate) sqlSave(ctx context.Context) (*Division, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Division.ID type: %T", _spec.ID.Value)
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DivisionCreate) createSpec() (*Division, *sqlgraph.CreateSpec) {
	var (
		_node = &Division{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(division.Table, sqlgraph.NewFieldSpec(division.FieldID, field.TypeString))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(division.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Description(); ok {
		_spec.SetField(division.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(division.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.CreatedBy(); ok {
		_spec.SetField(division.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(division.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.UpdatedBy(); ok {
		_spec.SetField(division.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := dc.mutation.DeletedAt(); ok {
		_spec.SetField(division.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := dc.mutation.DeletedBy(); ok {
		_spec.SetField(division.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := dc.mutation.IsDeleted(); ok {
		_spec.SetField(division.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	return _node, _spec
}

// DivisionCreateBulk is the builder for creating many Division entities in bulk.
type DivisionCreateBulk struct {
	config
	err      error
	builders []*DivisionCreate
}

// Save creates the Division entities in the database.
func (dcb *DivisionCreateBulk) Save(ctx context.Context) ([]*Division, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Division, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DivisionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DivisionCreateBulk) SaveX(ctx context.Context) []*Division {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DivisionCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DivisionCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
